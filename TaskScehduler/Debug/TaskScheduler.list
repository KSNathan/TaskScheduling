
TaskScheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000de0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08000f74  08000f74  00010f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800102c  0800102c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800102c  0800102c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800102c  0800102c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800102c  0800102c  0001102c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001030  08001030  00011030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000070  080010a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  080010a4  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002553  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000665  00000000  00000000  000225f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000178  00000000  00000000  00022c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000140  00000000  00000000  00022dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002a0f  00000000  00000000  00022f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001339  00000000  00000000  0002591f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000093f6  00000000  00000000  00026c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003004e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a74  00000000  00000000  000300cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000f5c 	.word	0x08000f5c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08000f5c 	.word	0x08000f5c

080001d4 <init_msp_stack>:
uint8_t curr_task = 0;
/*End Global Variables */

/*Useful functions*/
__attribute__((naked)) void init_msp_stack(uint32_t mspVal) {
	__asm volatile("MSR MSP,R0");
 80001d4:	f380 8808 	msr	MSP, r0
	__asm volatile("BX LR");
 80001d8:	4770      	bx	lr
}
 80001da:	bf00      	nop

080001dc <get_psp_of_curtask>:
uint32_t get_psp_of_curtask(void){
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
	return taskPSP[curr_task];
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <get_psp_of_curtask+0x1c>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	461a      	mov	r2, r3
 80001e6:	4b05      	ldr	r3, [pc, #20]	; (80001fc <get_psp_of_curtask+0x20>)
 80001e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80001ec:	4618      	mov	r0, r3
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	20000004 	.word	0x20000004

08000200 <save_psp_of_curtask>:
void save_psp_of_curtask(uint32_t currpsp){
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	taskPSP[curr_task] = currpsp;
 8000208:	4b06      	ldr	r3, [pc, #24]	; (8000224 <save_psp_of_curtask+0x24>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	4619      	mov	r1, r3
 800020e:	4a06      	ldr	r2, [pc, #24]	; (8000228 <save_psp_of_curtask+0x28>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	2000008c 	.word	0x2000008c
 8000228:	20000004 	.word	0x20000004

0800022c <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void){
	__asm volatile("PUSH {LR}");
 800022c:	b500      	push	{lr}
	__asm volatile("BL get_psp_of_curtask");
 800022e:	f7ff ffd5 	bl	80001dc <get_psp_of_curtask>
	__asm volatile("MSR PSP,R0");
 8000232:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 8000236:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("MOV R0,#0x02");
 800023a:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL,R0");
 800023e:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 8000242:	4770      	bx	lr
}
 8000244:	bf00      	nop
	...

08000248 <tasks_stack_init>:
void tasks_stack_init(void) {
 8000248:	b480      	push	{r7}
 800024a:	b085      	sub	sp, #20
 800024c:	af00      	add	r7, sp, #0
	uint32_t *psp;
	for (int i = 0; i < 2; i++) {
 800024e:	2300      	movs	r3, #0
 8000250:	60bb      	str	r3, [r7, #8]
 8000252:	e032      	b.n	80002ba <tasks_stack_init+0x72>
		psp = (uint32_t*) taskPSP[i];
 8000254:	4a1d      	ldr	r2, [pc, #116]	; (80002cc <tasks_stack_init+0x84>)
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800025c:	60fb      	str	r3, [r7, #12]
		psp--;
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	3b04      	subs	r3, #4
 8000262:	60fb      	str	r3, [r7, #12]

		*psp = 0x01000000;
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800026a:	601a      	str	r2, [r3, #0]

		psp--;
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	3b04      	subs	r3, #4
 8000270:	60fb      	str	r3, [r7, #12]

		*psp = task_handlers[i];
 8000272:	4a17      	ldr	r2, [pc, #92]	; (80002d0 <tasks_stack_init+0x88>)
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	601a      	str	r2, [r3, #0]

		psp--;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	3b04      	subs	r3, #4
 8000282:	60fb      	str	r3, [r7, #12]

		*psp = 0xFFFFFFFD;
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	f06f 0202 	mvn.w	r2, #2
 800028a:	601a      	str	r2, [r3, #0]


		for (int j = 0; j < 13; j++) {
 800028c:	2300      	movs	r3, #0
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	e008      	b.n	80002a4 <tasks_stack_init+0x5c>
			psp--;
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	3b04      	subs	r3, #4
 8000296:	60fb      	str	r3, [r7, #12]
			*psp = 0x0;
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 13; j++) {
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	3301      	adds	r3, #1
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2b0c      	cmp	r3, #12
 80002a8:	ddf3      	ble.n	8000292 <tasks_stack_init+0x4a>

		}
		taskPSP[i] = (uint32_t)psp;
 80002aa:	68fa      	ldr	r2, [r7, #12]
 80002ac:	4907      	ldr	r1, [pc, #28]	; (80002cc <tasks_stack_init+0x84>)
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 2; i++) {
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	3301      	adds	r3, #1
 80002b8:	60bb      	str	r3, [r7, #8]
 80002ba:	68bb      	ldr	r3, [r7, #8]
 80002bc:	2b01      	cmp	r3, #1
 80002be:	ddc9      	ble.n	8000254 <tasks_stack_init+0xc>
	}
}
 80002c0:	bf00      	nop
 80002c2:	3714      	adds	r7, #20
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	20000004 	.word	0x20000004
 80002d0:	2000009c 	.word	0x2000009c

080002d4 <update_next_task>:
void update_next_task(void) {
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
	curr_task++;
 80002d8:	4b08      	ldr	r3, [pc, #32]	; (80002fc <update_next_task+0x28>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	3301      	adds	r3, #1
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <update_next_task+0x28>)
 80002e2:	701a      	strb	r2, [r3, #0]
	curr_task %= 2;
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <update_next_task+0x28>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	f003 0301 	and.w	r3, r3, #1
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	4b03      	ldr	r3, [pc, #12]	; (80002fc <update_next_task+0x28>)
 80002f0:	701a      	strb	r2, [r3, #0]
}
 80002f2:	bf00      	nop
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	2000008c 	.word	0x2000008c

08000300 <task1>:
/*End Useful Functions*/
void task1(void) {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	while (1) {
		printf("Hello Task1\n");
 8000304:	4801      	ldr	r0, [pc, #4]	; (800030c <task1+0xc>)
 8000306:	f000 fa1d 	bl	8000744 <puts>
 800030a:	e7fb      	b.n	8000304 <task1+0x4>
 800030c:	08000f74 	.word	0x08000f74

08000310 <task2>:

	}
}
void task2(void) {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	while (1) {
		printf("Hello Task2\n");
 8000314:	4801      	ldr	r0, [pc, #4]	; (800031c <task2+0xc>)
 8000316:	f000 fa15 	bl	8000744 <puts>
 800031a:	e7fb      	b.n	8000314 <task2+0x4>
 800031c:	08000f80 	.word	0x08000f80

08000320 <main>:
	}
}
int main(void) {
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
	/* Enabling the exceptions */

		pSHCSR->BUSFAULTENA = 1;
 8000326:	4b24      	ldr	r3, [pc, #144]	; (80003b8 <main+0x98>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	7893      	ldrb	r3, [r2, #2]
 800032c:	f043 0302 	orr.w	r3, r3, #2
 8000330:	7093      	strb	r3, [r2, #2]
		pSHCSR->MEMFAULTENA = 1;
 8000332:	4b21      	ldr	r3, [pc, #132]	; (80003b8 <main+0x98>)
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	7893      	ldrb	r3, [r2, #2]
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	7093      	strb	r3, [r2, #2]
		pSHCSR->USGFAULTENA = 1;
 800033e:	4b1e      	ldr	r3, [pc, #120]	; (80003b8 <main+0x98>)
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	7893      	ldrb	r3, [r2, #2]
 8000344:	f043 0304 	orr.w	r3, r3, #4
 8000348:	7093      	strb	r3, [r2, #2]
		/* End enabling exception */
	/*Initializations*/
		init_msp_stack(STACK_START_MSP);
 800034a:	481c      	ldr	r0, [pc, #112]	; (80003bc <main+0x9c>)
 800034c:	f7ff ff42 	bl	80001d4 <init_msp_stack>

		task_handlers[0] =  (uint32_t)task1;
 8000350:	4a1b      	ldr	r2, [pc, #108]	; (80003c0 <main+0xa0>)
 8000352:	4b1c      	ldr	r3, [pc, #112]	; (80003c4 <main+0xa4>)
 8000354:	601a      	str	r2, [r3, #0]
		task_handlers[1] =  (uint32_t)task2;
 8000356:	4a1c      	ldr	r2, [pc, #112]	; (80003c8 <main+0xa8>)
 8000358:	4b1a      	ldr	r3, [pc, #104]	; (80003c4 <main+0xa4>)
 800035a:	605a      	str	r2, [r3, #4]

		tasks_stack_init();
 800035c:	f7ff ff74 	bl	8000248 <tasks_stack_init>

		/*End initializations*/
	/*Systick enable*/
	uint32_t tick_value = 2;
 8000360:	2302      	movs	r3, #2
 8000362:	60fb      	str	r3, [r7, #12]
	SYST_CSR *pCSR = (uint32_t *) 0xE000E010;
 8000364:	4b19      	ldr	r3, [pc, #100]	; (80003cc <main+0xac>)
 8000366:	60bb      	str	r3, [r7, #8]
	SYST_RVR *pRVR = (uint32_t *) 0xE000E014;
 8000368:	4b19      	ldr	r3, [pc, #100]	; (80003d0 <main+0xb0>)
 800036a:	607b      	str	r3, [r7, #4]

	pCSR->ENABLE = 0;
 800036c:	68ba      	ldr	r2, [r7, #8]
 800036e:	7813      	ldrb	r3, [r2, #0]
 8000370:	f36f 0300 	bfc	r3, #0, #1
 8000374:	7013      	strb	r3, [r2, #0]
	pCSR->CLKSOURCE = 1;
 8000376:	68ba      	ldr	r2, [r7, #8]
 8000378:	7813      	ldrb	r3, [r2, #0]
 800037a:	f043 0304 	orr.w	r3, r3, #4
 800037e:	7013      	strb	r3, [r2, #0]
	pCSR->TICKINIT = 1;
 8000380:	68ba      	ldr	r2, [r7, #8]
 8000382:	7813      	ldrb	r3, [r2, #0]
 8000384:	f043 0302 	orr.w	r3, r3, #2
 8000388:	7013      	strb	r3, [r2, #0]
	pRVR->RELOAD_VALUE = SYSTICK_CLK / (tick_value - 1);
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	3b01      	subs	r3, #1
 800038e:	4a11      	ldr	r2, [pc, #68]	; (80003d4 <main+0xb4>)
 8000390:	fbb2 f3f3 	udiv	r3, r2, r3
 8000394:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	6813      	ldr	r3, [r2, #0]
 800039c:	f361 0317 	bfi	r3, r1, #0, #24
 80003a0:	6013      	str	r3, [r2, #0]
	//Trigger the enable for systick
	pCSR->ENABLE = 1;
 80003a2:	68ba      	ldr	r2, [r7, #8]
 80003a4:	7813      	ldrb	r3, [r2, #0]
 80003a6:	f043 0301 	orr.w	r3, r3, #1
 80003aa:	7013      	strb	r3, [r2, #0]
	/*end systick enable*/
	switch_sp_to_psp();
 80003ac:	f7ff ff3e 	bl	800022c <switch_sp_to_psp>
	task1();
 80003b0:	f7ff ffa6 	bl	8000300 <task1>

	for (;;)
 80003b4:	e7fe      	b.n	80003b4 <main+0x94>
 80003b6:	bf00      	nop
 80003b8:	20000000 	.word	0x20000000
 80003bc:	20017800 	.word	0x20017800
 80003c0:	08000301 	.word	0x08000301
 80003c4:	2000009c 	.word	0x2000009c
 80003c8:	08000311 	.word	0x08000311
 80003cc:	e000e010 	.word	0xe000e010
 80003d0:	e000e014 	.word	0xe000e014
 80003d4:	00f42400 	.word	0x00f42400

080003d8 <SysTick_Handler>:
		;
}

__attribute__((naked))void SysTick_Handler(void) {
	//printf("Hi Entered handler\n");
	__asm volatile("MRS R0,PSP");
 80003d8:	f3ef 8009 	mrs	r0, PSP

	__asm volatile("STMDB R0!,{R4-R11}");
 80003dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}");
 80003e0:	b500      	push	{lr}
	__asm volatile("BL save_psp_of_curtask");
 80003e2:	f7ff ff0d 	bl	8000200 <save_psp_of_curtask>

	__asm volatile("BL update_next_task");
 80003e6:	f7ff ff75 	bl	80002d4 <update_next_task>

	__asm volatile("BL get_psp_of_curtask");
 80003ea:	f7ff fef7 	bl	80001dc <get_psp_of_curtask>

	__asm volatile("LDMIA R0!,{R4-R11}");
 80003ee:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("MSR PSP,R0");
 80003f2:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 80003f6:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 80003fa:	4770      	bx	lr
}
 80003fc:	bf00      	nop
	...

08000400 <MemManage_Handler>:
void MemManage_Handler(void) {
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	printf("Handling mem manage\n");
 8000404:	4802      	ldr	r0, [pc, #8]	; (8000410 <MemManage_Handler+0x10>)
 8000406:	f000 f99d 	bl	8000744 <puts>
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	08000f8c 	.word	0x08000f8c

08000414 <BusFault_Handler>:
void BusFault_Handler(void) {
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	printf("Handling bus fault\n");
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <BusFault_Handler+0x10>)
 800041a:	f000 f993 	bl	8000744 <puts>
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	08000fa0 	.word	0x08000fa0

08000428 <UsageFault_Handler>:
void UsageFault_Handler(void) {
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	printf("Handling Usagefault\n");
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <UsageFault_Handler+0x10>)
 800042e:	f000 f989 	bl	8000744 <puts>
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	08000fb4 	.word	0x08000fb4

0800043c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <ITM_SendChar+0x48>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a0e      	ldr	r2, [pc, #56]	; (8000484 <ITM_SendChar+0x48>)
 800044c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000450:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000452:	4b0d      	ldr	r3, [pc, #52]	; (8000488 <ITM_SendChar+0x4c>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a0c      	ldr	r2, [pc, #48]	; (8000488 <ITM_SendChar+0x4c>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800045e:	bf00      	nop
 8000460:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	2b00      	cmp	r3, #0
 800046c:	d0f8      	beq.n	8000460 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800046e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	6013      	str	r3, [r2, #0]
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	e000edfc 	.word	0xe000edfc
 8000488:	e0000e00 	.word	0xe0000e00

0800048c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b086      	sub	sp, #24
 8000490:	af00      	add	r7, sp, #0
 8000492:	60f8      	str	r0, [r7, #12]
 8000494:	60b9      	str	r1, [r7, #8]
 8000496:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]
 800049c:	e00a      	b.n	80004b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800049e:	f3af 8000 	nop.w
 80004a2:	4601      	mov	r1, r0
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	1c5a      	adds	r2, r3, #1
 80004a8:	60ba      	str	r2, [r7, #8]
 80004aa:	b2ca      	uxtb	r2, r1
 80004ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	3301      	adds	r3, #1
 80004b2:	617b      	str	r3, [r7, #20]
 80004b4:	697a      	ldr	r2, [r7, #20]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	dbf0      	blt.n	800049e <_read+0x12>
	}

return len;
 80004bc:	687b      	ldr	r3, [r7, #4]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3718      	adds	r7, #24
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004c6:	b580      	push	{r7, lr}
 80004c8:	b086      	sub	sp, #24
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	60f8      	str	r0, [r7, #12]
 80004ce:	60b9      	str	r1, [r7, #8]
 80004d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d2:	2300      	movs	r3, #0
 80004d4:	617b      	str	r3, [r7, #20]
 80004d6:	e009      	b.n	80004ec <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	1c5a      	adds	r2, r3, #1
 80004dc:	60ba      	str	r2, [r7, #8]
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff ffab 	bl	800043c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	3301      	adds	r3, #1
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	697a      	ldr	r2, [r7, #20]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	dbf1      	blt.n	80004d8 <_write+0x12>
	}
	return len;
 80004f4:	687b      	ldr	r3, [r7, #4]
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3718      	adds	r7, #24
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <_close>:

int _close(int file)
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
	return -1;
 8000506:	f04f 33ff 	mov.w	r3, #4294967295
}
 800050a:	4618      	mov	r0, r3
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000526:	605a      	str	r2, [r3, #4]
	return 0;
 8000528:	2300      	movs	r3, #0
}
 800052a:	4618      	mov	r0, r3
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr

08000536 <_isatty>:

int _isatty(int file)
{
 8000536:	b480      	push	{r7}
 8000538:	b083      	sub	sp, #12
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
	return 1;
 800053e:	2301      	movs	r3, #1
}
 8000540:	4618      	mov	r0, r3
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	607a      	str	r2, [r7, #4]
	return 0;
 8000558:	2300      	movs	r3, #0
}
 800055a:	4618      	mov	r0, r3
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
	...

08000568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000570:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <_sbrk+0x5c>)
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <_sbrk+0x60>)
 8000574:	1ad3      	subs	r3, r2, r3
 8000576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800057c:	4b13      	ldr	r3, [pc, #76]	; (80005cc <_sbrk+0x64>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d102      	bne.n	800058a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <_sbrk+0x64>)
 8000586:	4a12      	ldr	r2, [pc, #72]	; (80005d0 <_sbrk+0x68>)
 8000588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <_sbrk+0x64>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	693a      	ldr	r2, [r7, #16]
 8000594:	429a      	cmp	r2, r3
 8000596:	d207      	bcs.n	80005a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000598:	f000 f846 	bl	8000628 <__errno>
 800059c:	4602      	mov	r2, r0
 800059e:	230c      	movs	r3, #12
 80005a0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	e009      	b.n	80005bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <_sbrk+0x64>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <_sbrk+0x64>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	4a05      	ldr	r2, [pc, #20]	; (80005cc <_sbrk+0x64>)
 80005b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ba:	68fb      	ldr	r3, [r7, #12]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3718      	adds	r7, #24
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20018000 	.word	0x20018000
 80005c8:	00000400 	.word	0x00000400
 80005cc:	20000090 	.word	0x20000090
 80005d0:	200000a8 	.word	0x200000a8

080005d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d4:	480d      	ldr	r0, [pc, #52]	; (800060c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005d6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <LoopForever+0x6>)
  ldr r1, =_edata
 80005de:	490d      	ldr	r1, [pc, #52]	; (8000614 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e0:	4a0d      	ldr	r2, [pc, #52]	; (8000618 <LoopForever+0xe>)
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e4:	e002      	b.n	80005ec <LoopCopyDataInit>

080005e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ea:	3304      	adds	r3, #4

080005ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f0:	d3f9      	bcc.n	80005e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f2:	4a0a      	ldr	r2, [pc, #40]	; (800061c <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f4:	4c0a      	ldr	r4, [pc, #40]	; (8000620 <LoopForever+0x16>)
  movs r3, #0
 80005f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f8:	e001      	b.n	80005fe <LoopFillZerobss>

080005fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005fc:	3204      	adds	r2, #4

080005fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000600:	d3fb      	bcc.n	80005fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000602:	f000 f817 	bl	8000634 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000606:	f7ff fe8b 	bl	8000320 <main>

0800060a <LoopForever>:

LoopForever:
    b LoopForever
 800060a:	e7fe      	b.n	800060a <LoopForever>
  ldr   r0, =_estack
 800060c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000614:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000618:	08001034 	.word	0x08001034
  ldr r2, =_sbss
 800061c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000620:	200000a8 	.word	0x200000a8

08000624 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000624:	e7fe      	b.n	8000624 <ADC_IRQHandler>
	...

08000628 <__errno>:
 8000628:	4b01      	ldr	r3, [pc, #4]	; (8000630 <__errno+0x8>)
 800062a:	6818      	ldr	r0, [r3, #0]
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	2000000c 	.word	0x2000000c

08000634 <__libc_init_array>:
 8000634:	b570      	push	{r4, r5, r6, lr}
 8000636:	4e0d      	ldr	r6, [pc, #52]	; (800066c <__libc_init_array+0x38>)
 8000638:	4c0d      	ldr	r4, [pc, #52]	; (8000670 <__libc_init_array+0x3c>)
 800063a:	1ba4      	subs	r4, r4, r6
 800063c:	10a4      	asrs	r4, r4, #2
 800063e:	2500      	movs	r5, #0
 8000640:	42a5      	cmp	r5, r4
 8000642:	d109      	bne.n	8000658 <__libc_init_array+0x24>
 8000644:	4e0b      	ldr	r6, [pc, #44]	; (8000674 <__libc_init_array+0x40>)
 8000646:	4c0c      	ldr	r4, [pc, #48]	; (8000678 <__libc_init_array+0x44>)
 8000648:	f000 fc88 	bl	8000f5c <_init>
 800064c:	1ba4      	subs	r4, r4, r6
 800064e:	10a4      	asrs	r4, r4, #2
 8000650:	2500      	movs	r5, #0
 8000652:	42a5      	cmp	r5, r4
 8000654:	d105      	bne.n	8000662 <__libc_init_array+0x2e>
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800065c:	4798      	blx	r3
 800065e:	3501      	adds	r5, #1
 8000660:	e7ee      	b.n	8000640 <__libc_init_array+0xc>
 8000662:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000666:	4798      	blx	r3
 8000668:	3501      	adds	r5, #1
 800066a:	e7f2      	b.n	8000652 <__libc_init_array+0x1e>
 800066c:	0800102c 	.word	0x0800102c
 8000670:	0800102c 	.word	0x0800102c
 8000674:	0800102c 	.word	0x0800102c
 8000678:	08001030 	.word	0x08001030

0800067c <memset>:
 800067c:	4402      	add	r2, r0
 800067e:	4603      	mov	r3, r0
 8000680:	4293      	cmp	r3, r2
 8000682:	d100      	bne.n	8000686 <memset+0xa>
 8000684:	4770      	bx	lr
 8000686:	f803 1b01 	strb.w	r1, [r3], #1
 800068a:	e7f9      	b.n	8000680 <memset+0x4>

0800068c <_puts_r>:
 800068c:	b570      	push	{r4, r5, r6, lr}
 800068e:	460e      	mov	r6, r1
 8000690:	4605      	mov	r5, r0
 8000692:	b118      	cbz	r0, 800069c <_puts_r+0x10>
 8000694:	6983      	ldr	r3, [r0, #24]
 8000696:	b90b      	cbnz	r3, 800069c <_puts_r+0x10>
 8000698:	f000 fa0c 	bl	8000ab4 <__sinit>
 800069c:	69ab      	ldr	r3, [r5, #24]
 800069e:	68ac      	ldr	r4, [r5, #8]
 80006a0:	b913      	cbnz	r3, 80006a8 <_puts_r+0x1c>
 80006a2:	4628      	mov	r0, r5
 80006a4:	f000 fa06 	bl	8000ab4 <__sinit>
 80006a8:	4b23      	ldr	r3, [pc, #140]	; (8000738 <_puts_r+0xac>)
 80006aa:	429c      	cmp	r4, r3
 80006ac:	d117      	bne.n	80006de <_puts_r+0x52>
 80006ae:	686c      	ldr	r4, [r5, #4]
 80006b0:	89a3      	ldrh	r3, [r4, #12]
 80006b2:	071b      	lsls	r3, r3, #28
 80006b4:	d51d      	bpl.n	80006f2 <_puts_r+0x66>
 80006b6:	6923      	ldr	r3, [r4, #16]
 80006b8:	b1db      	cbz	r3, 80006f2 <_puts_r+0x66>
 80006ba:	3e01      	subs	r6, #1
 80006bc:	68a3      	ldr	r3, [r4, #8]
 80006be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80006c2:	3b01      	subs	r3, #1
 80006c4:	60a3      	str	r3, [r4, #8]
 80006c6:	b9e9      	cbnz	r1, 8000704 <_puts_r+0x78>
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	da2e      	bge.n	800072a <_puts_r+0x9e>
 80006cc:	4622      	mov	r2, r4
 80006ce:	210a      	movs	r1, #10
 80006d0:	4628      	mov	r0, r5
 80006d2:	f000 f83f 	bl	8000754 <__swbuf_r>
 80006d6:	3001      	adds	r0, #1
 80006d8:	d011      	beq.n	80006fe <_puts_r+0x72>
 80006da:	200a      	movs	r0, #10
 80006dc:	e011      	b.n	8000702 <_puts_r+0x76>
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <_puts_r+0xb0>)
 80006e0:	429c      	cmp	r4, r3
 80006e2:	d101      	bne.n	80006e8 <_puts_r+0x5c>
 80006e4:	68ac      	ldr	r4, [r5, #8]
 80006e6:	e7e3      	b.n	80006b0 <_puts_r+0x24>
 80006e8:	4b15      	ldr	r3, [pc, #84]	; (8000740 <_puts_r+0xb4>)
 80006ea:	429c      	cmp	r4, r3
 80006ec:	bf08      	it	eq
 80006ee:	68ec      	ldreq	r4, [r5, #12]
 80006f0:	e7de      	b.n	80006b0 <_puts_r+0x24>
 80006f2:	4621      	mov	r1, r4
 80006f4:	4628      	mov	r0, r5
 80006f6:	f000 f87f 	bl	80007f8 <__swsetup_r>
 80006fa:	2800      	cmp	r0, #0
 80006fc:	d0dd      	beq.n	80006ba <_puts_r+0x2e>
 80006fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	2b00      	cmp	r3, #0
 8000706:	da04      	bge.n	8000712 <_puts_r+0x86>
 8000708:	69a2      	ldr	r2, [r4, #24]
 800070a:	429a      	cmp	r2, r3
 800070c:	dc06      	bgt.n	800071c <_puts_r+0x90>
 800070e:	290a      	cmp	r1, #10
 8000710:	d004      	beq.n	800071c <_puts_r+0x90>
 8000712:	6823      	ldr	r3, [r4, #0]
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	6022      	str	r2, [r4, #0]
 8000718:	7019      	strb	r1, [r3, #0]
 800071a:	e7cf      	b.n	80006bc <_puts_r+0x30>
 800071c:	4622      	mov	r2, r4
 800071e:	4628      	mov	r0, r5
 8000720:	f000 f818 	bl	8000754 <__swbuf_r>
 8000724:	3001      	adds	r0, #1
 8000726:	d1c9      	bne.n	80006bc <_puts_r+0x30>
 8000728:	e7e9      	b.n	80006fe <_puts_r+0x72>
 800072a:	6823      	ldr	r3, [r4, #0]
 800072c:	200a      	movs	r0, #10
 800072e:	1c5a      	adds	r2, r3, #1
 8000730:	6022      	str	r2, [r4, #0]
 8000732:	7018      	strb	r0, [r3, #0]
 8000734:	e7e5      	b.n	8000702 <_puts_r+0x76>
 8000736:	bf00      	nop
 8000738:	08000fec 	.word	0x08000fec
 800073c:	0800100c 	.word	0x0800100c
 8000740:	08000fcc 	.word	0x08000fcc

08000744 <puts>:
 8000744:	4b02      	ldr	r3, [pc, #8]	; (8000750 <puts+0xc>)
 8000746:	4601      	mov	r1, r0
 8000748:	6818      	ldr	r0, [r3, #0]
 800074a:	f7ff bf9f 	b.w	800068c <_puts_r>
 800074e:	bf00      	nop
 8000750:	2000000c 	.word	0x2000000c

08000754 <__swbuf_r>:
 8000754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000756:	460e      	mov	r6, r1
 8000758:	4614      	mov	r4, r2
 800075a:	4605      	mov	r5, r0
 800075c:	b118      	cbz	r0, 8000766 <__swbuf_r+0x12>
 800075e:	6983      	ldr	r3, [r0, #24]
 8000760:	b90b      	cbnz	r3, 8000766 <__swbuf_r+0x12>
 8000762:	f000 f9a7 	bl	8000ab4 <__sinit>
 8000766:	4b21      	ldr	r3, [pc, #132]	; (80007ec <__swbuf_r+0x98>)
 8000768:	429c      	cmp	r4, r3
 800076a:	d12a      	bne.n	80007c2 <__swbuf_r+0x6e>
 800076c:	686c      	ldr	r4, [r5, #4]
 800076e:	69a3      	ldr	r3, [r4, #24]
 8000770:	60a3      	str	r3, [r4, #8]
 8000772:	89a3      	ldrh	r3, [r4, #12]
 8000774:	071a      	lsls	r2, r3, #28
 8000776:	d52e      	bpl.n	80007d6 <__swbuf_r+0x82>
 8000778:	6923      	ldr	r3, [r4, #16]
 800077a:	b363      	cbz	r3, 80007d6 <__swbuf_r+0x82>
 800077c:	6923      	ldr	r3, [r4, #16]
 800077e:	6820      	ldr	r0, [r4, #0]
 8000780:	1ac0      	subs	r0, r0, r3
 8000782:	6963      	ldr	r3, [r4, #20]
 8000784:	b2f6      	uxtb	r6, r6
 8000786:	4283      	cmp	r3, r0
 8000788:	4637      	mov	r7, r6
 800078a:	dc04      	bgt.n	8000796 <__swbuf_r+0x42>
 800078c:	4621      	mov	r1, r4
 800078e:	4628      	mov	r0, r5
 8000790:	f000 f926 	bl	80009e0 <_fflush_r>
 8000794:	bb28      	cbnz	r0, 80007e2 <__swbuf_r+0x8e>
 8000796:	68a3      	ldr	r3, [r4, #8]
 8000798:	3b01      	subs	r3, #1
 800079a:	60a3      	str	r3, [r4, #8]
 800079c:	6823      	ldr	r3, [r4, #0]
 800079e:	1c5a      	adds	r2, r3, #1
 80007a0:	6022      	str	r2, [r4, #0]
 80007a2:	701e      	strb	r6, [r3, #0]
 80007a4:	6963      	ldr	r3, [r4, #20]
 80007a6:	3001      	adds	r0, #1
 80007a8:	4283      	cmp	r3, r0
 80007aa:	d004      	beq.n	80007b6 <__swbuf_r+0x62>
 80007ac:	89a3      	ldrh	r3, [r4, #12]
 80007ae:	07db      	lsls	r3, r3, #31
 80007b0:	d519      	bpl.n	80007e6 <__swbuf_r+0x92>
 80007b2:	2e0a      	cmp	r6, #10
 80007b4:	d117      	bne.n	80007e6 <__swbuf_r+0x92>
 80007b6:	4621      	mov	r1, r4
 80007b8:	4628      	mov	r0, r5
 80007ba:	f000 f911 	bl	80009e0 <_fflush_r>
 80007be:	b190      	cbz	r0, 80007e6 <__swbuf_r+0x92>
 80007c0:	e00f      	b.n	80007e2 <__swbuf_r+0x8e>
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <__swbuf_r+0x9c>)
 80007c4:	429c      	cmp	r4, r3
 80007c6:	d101      	bne.n	80007cc <__swbuf_r+0x78>
 80007c8:	68ac      	ldr	r4, [r5, #8]
 80007ca:	e7d0      	b.n	800076e <__swbuf_r+0x1a>
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <__swbuf_r+0xa0>)
 80007ce:	429c      	cmp	r4, r3
 80007d0:	bf08      	it	eq
 80007d2:	68ec      	ldreq	r4, [r5, #12]
 80007d4:	e7cb      	b.n	800076e <__swbuf_r+0x1a>
 80007d6:	4621      	mov	r1, r4
 80007d8:	4628      	mov	r0, r5
 80007da:	f000 f80d 	bl	80007f8 <__swsetup_r>
 80007de:	2800      	cmp	r0, #0
 80007e0:	d0cc      	beq.n	800077c <__swbuf_r+0x28>
 80007e2:	f04f 37ff 	mov.w	r7, #4294967295
 80007e6:	4638      	mov	r0, r7
 80007e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007ea:	bf00      	nop
 80007ec:	08000fec 	.word	0x08000fec
 80007f0:	0800100c 	.word	0x0800100c
 80007f4:	08000fcc 	.word	0x08000fcc

080007f8 <__swsetup_r>:
 80007f8:	4b32      	ldr	r3, [pc, #200]	; (80008c4 <__swsetup_r+0xcc>)
 80007fa:	b570      	push	{r4, r5, r6, lr}
 80007fc:	681d      	ldr	r5, [r3, #0]
 80007fe:	4606      	mov	r6, r0
 8000800:	460c      	mov	r4, r1
 8000802:	b125      	cbz	r5, 800080e <__swsetup_r+0x16>
 8000804:	69ab      	ldr	r3, [r5, #24]
 8000806:	b913      	cbnz	r3, 800080e <__swsetup_r+0x16>
 8000808:	4628      	mov	r0, r5
 800080a:	f000 f953 	bl	8000ab4 <__sinit>
 800080e:	4b2e      	ldr	r3, [pc, #184]	; (80008c8 <__swsetup_r+0xd0>)
 8000810:	429c      	cmp	r4, r3
 8000812:	d10f      	bne.n	8000834 <__swsetup_r+0x3c>
 8000814:	686c      	ldr	r4, [r5, #4]
 8000816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800081a:	b29a      	uxth	r2, r3
 800081c:	0715      	lsls	r5, r2, #28
 800081e:	d42c      	bmi.n	800087a <__swsetup_r+0x82>
 8000820:	06d0      	lsls	r0, r2, #27
 8000822:	d411      	bmi.n	8000848 <__swsetup_r+0x50>
 8000824:	2209      	movs	r2, #9
 8000826:	6032      	str	r2, [r6, #0]
 8000828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800082c:	81a3      	strh	r3, [r4, #12]
 800082e:	f04f 30ff 	mov.w	r0, #4294967295
 8000832:	e03e      	b.n	80008b2 <__swsetup_r+0xba>
 8000834:	4b25      	ldr	r3, [pc, #148]	; (80008cc <__swsetup_r+0xd4>)
 8000836:	429c      	cmp	r4, r3
 8000838:	d101      	bne.n	800083e <__swsetup_r+0x46>
 800083a:	68ac      	ldr	r4, [r5, #8]
 800083c:	e7eb      	b.n	8000816 <__swsetup_r+0x1e>
 800083e:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <__swsetup_r+0xd8>)
 8000840:	429c      	cmp	r4, r3
 8000842:	bf08      	it	eq
 8000844:	68ec      	ldreq	r4, [r5, #12]
 8000846:	e7e6      	b.n	8000816 <__swsetup_r+0x1e>
 8000848:	0751      	lsls	r1, r2, #29
 800084a:	d512      	bpl.n	8000872 <__swsetup_r+0x7a>
 800084c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800084e:	b141      	cbz	r1, 8000862 <__swsetup_r+0x6a>
 8000850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000854:	4299      	cmp	r1, r3
 8000856:	d002      	beq.n	800085e <__swsetup_r+0x66>
 8000858:	4630      	mov	r0, r6
 800085a:	f000 fa19 	bl	8000c90 <_free_r>
 800085e:	2300      	movs	r3, #0
 8000860:	6363      	str	r3, [r4, #52]	; 0x34
 8000862:	89a3      	ldrh	r3, [r4, #12]
 8000864:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000868:	81a3      	strh	r3, [r4, #12]
 800086a:	2300      	movs	r3, #0
 800086c:	6063      	str	r3, [r4, #4]
 800086e:	6923      	ldr	r3, [r4, #16]
 8000870:	6023      	str	r3, [r4, #0]
 8000872:	89a3      	ldrh	r3, [r4, #12]
 8000874:	f043 0308 	orr.w	r3, r3, #8
 8000878:	81a3      	strh	r3, [r4, #12]
 800087a:	6923      	ldr	r3, [r4, #16]
 800087c:	b94b      	cbnz	r3, 8000892 <__swsetup_r+0x9a>
 800087e:	89a3      	ldrh	r3, [r4, #12]
 8000880:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000888:	d003      	beq.n	8000892 <__swsetup_r+0x9a>
 800088a:	4621      	mov	r1, r4
 800088c:	4630      	mov	r0, r6
 800088e:	f000 f9bf 	bl	8000c10 <__smakebuf_r>
 8000892:	89a2      	ldrh	r2, [r4, #12]
 8000894:	f012 0301 	ands.w	r3, r2, #1
 8000898:	d00c      	beq.n	80008b4 <__swsetup_r+0xbc>
 800089a:	2300      	movs	r3, #0
 800089c:	60a3      	str	r3, [r4, #8]
 800089e:	6963      	ldr	r3, [r4, #20]
 80008a0:	425b      	negs	r3, r3
 80008a2:	61a3      	str	r3, [r4, #24]
 80008a4:	6923      	ldr	r3, [r4, #16]
 80008a6:	b953      	cbnz	r3, 80008be <__swsetup_r+0xc6>
 80008a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80008b0:	d1ba      	bne.n	8000828 <__swsetup_r+0x30>
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	0792      	lsls	r2, r2, #30
 80008b6:	bf58      	it	pl
 80008b8:	6963      	ldrpl	r3, [r4, #20]
 80008ba:	60a3      	str	r3, [r4, #8]
 80008bc:	e7f2      	b.n	80008a4 <__swsetup_r+0xac>
 80008be:	2000      	movs	r0, #0
 80008c0:	e7f7      	b.n	80008b2 <__swsetup_r+0xba>
 80008c2:	bf00      	nop
 80008c4:	2000000c 	.word	0x2000000c
 80008c8:	08000fec 	.word	0x08000fec
 80008cc:	0800100c 	.word	0x0800100c
 80008d0:	08000fcc 	.word	0x08000fcc

080008d4 <__sflush_r>:
 80008d4:	898a      	ldrh	r2, [r1, #12]
 80008d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008da:	4605      	mov	r5, r0
 80008dc:	0710      	lsls	r0, r2, #28
 80008de:	460c      	mov	r4, r1
 80008e0:	d458      	bmi.n	8000994 <__sflush_r+0xc0>
 80008e2:	684b      	ldr	r3, [r1, #4]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	dc05      	bgt.n	80008f4 <__sflush_r+0x20>
 80008e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dc02      	bgt.n	80008f4 <__sflush_r+0x20>
 80008ee:	2000      	movs	r0, #0
 80008f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80008f6:	2e00      	cmp	r6, #0
 80008f8:	d0f9      	beq.n	80008ee <__sflush_r+0x1a>
 80008fa:	2300      	movs	r3, #0
 80008fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000900:	682f      	ldr	r7, [r5, #0]
 8000902:	6a21      	ldr	r1, [r4, #32]
 8000904:	602b      	str	r3, [r5, #0]
 8000906:	d032      	beq.n	800096e <__sflush_r+0x9a>
 8000908:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800090a:	89a3      	ldrh	r3, [r4, #12]
 800090c:	075a      	lsls	r2, r3, #29
 800090e:	d505      	bpl.n	800091c <__sflush_r+0x48>
 8000910:	6863      	ldr	r3, [r4, #4]
 8000912:	1ac0      	subs	r0, r0, r3
 8000914:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000916:	b10b      	cbz	r3, 800091c <__sflush_r+0x48>
 8000918:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800091a:	1ac0      	subs	r0, r0, r3
 800091c:	2300      	movs	r3, #0
 800091e:	4602      	mov	r2, r0
 8000920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000922:	6a21      	ldr	r1, [r4, #32]
 8000924:	4628      	mov	r0, r5
 8000926:	47b0      	blx	r6
 8000928:	1c43      	adds	r3, r0, #1
 800092a:	89a3      	ldrh	r3, [r4, #12]
 800092c:	d106      	bne.n	800093c <__sflush_r+0x68>
 800092e:	6829      	ldr	r1, [r5, #0]
 8000930:	291d      	cmp	r1, #29
 8000932:	d848      	bhi.n	80009c6 <__sflush_r+0xf2>
 8000934:	4a29      	ldr	r2, [pc, #164]	; (80009dc <__sflush_r+0x108>)
 8000936:	40ca      	lsrs	r2, r1
 8000938:	07d6      	lsls	r6, r2, #31
 800093a:	d544      	bpl.n	80009c6 <__sflush_r+0xf2>
 800093c:	2200      	movs	r2, #0
 800093e:	6062      	str	r2, [r4, #4]
 8000940:	04d9      	lsls	r1, r3, #19
 8000942:	6922      	ldr	r2, [r4, #16]
 8000944:	6022      	str	r2, [r4, #0]
 8000946:	d504      	bpl.n	8000952 <__sflush_r+0x7e>
 8000948:	1c42      	adds	r2, r0, #1
 800094a:	d101      	bne.n	8000950 <__sflush_r+0x7c>
 800094c:	682b      	ldr	r3, [r5, #0]
 800094e:	b903      	cbnz	r3, 8000952 <__sflush_r+0x7e>
 8000950:	6560      	str	r0, [r4, #84]	; 0x54
 8000952:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000954:	602f      	str	r7, [r5, #0]
 8000956:	2900      	cmp	r1, #0
 8000958:	d0c9      	beq.n	80008ee <__sflush_r+0x1a>
 800095a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800095e:	4299      	cmp	r1, r3
 8000960:	d002      	beq.n	8000968 <__sflush_r+0x94>
 8000962:	4628      	mov	r0, r5
 8000964:	f000 f994 	bl	8000c90 <_free_r>
 8000968:	2000      	movs	r0, #0
 800096a:	6360      	str	r0, [r4, #52]	; 0x34
 800096c:	e7c0      	b.n	80008f0 <__sflush_r+0x1c>
 800096e:	2301      	movs	r3, #1
 8000970:	4628      	mov	r0, r5
 8000972:	47b0      	blx	r6
 8000974:	1c41      	adds	r1, r0, #1
 8000976:	d1c8      	bne.n	800090a <__sflush_r+0x36>
 8000978:	682b      	ldr	r3, [r5, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d0c5      	beq.n	800090a <__sflush_r+0x36>
 800097e:	2b1d      	cmp	r3, #29
 8000980:	d001      	beq.n	8000986 <__sflush_r+0xb2>
 8000982:	2b16      	cmp	r3, #22
 8000984:	d101      	bne.n	800098a <__sflush_r+0xb6>
 8000986:	602f      	str	r7, [r5, #0]
 8000988:	e7b1      	b.n	80008ee <__sflush_r+0x1a>
 800098a:	89a3      	ldrh	r3, [r4, #12]
 800098c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000990:	81a3      	strh	r3, [r4, #12]
 8000992:	e7ad      	b.n	80008f0 <__sflush_r+0x1c>
 8000994:	690f      	ldr	r7, [r1, #16]
 8000996:	2f00      	cmp	r7, #0
 8000998:	d0a9      	beq.n	80008ee <__sflush_r+0x1a>
 800099a:	0793      	lsls	r3, r2, #30
 800099c:	680e      	ldr	r6, [r1, #0]
 800099e:	bf08      	it	eq
 80009a0:	694b      	ldreq	r3, [r1, #20]
 80009a2:	600f      	str	r7, [r1, #0]
 80009a4:	bf18      	it	ne
 80009a6:	2300      	movne	r3, #0
 80009a8:	eba6 0807 	sub.w	r8, r6, r7
 80009ac:	608b      	str	r3, [r1, #8]
 80009ae:	f1b8 0f00 	cmp.w	r8, #0
 80009b2:	dd9c      	ble.n	80008ee <__sflush_r+0x1a>
 80009b4:	4643      	mov	r3, r8
 80009b6:	463a      	mov	r2, r7
 80009b8:	6a21      	ldr	r1, [r4, #32]
 80009ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80009bc:	4628      	mov	r0, r5
 80009be:	47b0      	blx	r6
 80009c0:	2800      	cmp	r0, #0
 80009c2:	dc06      	bgt.n	80009d2 <__sflush_r+0xfe>
 80009c4:	89a3      	ldrh	r3, [r4, #12]
 80009c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ca:	81a3      	strh	r3, [r4, #12]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	e78e      	b.n	80008f0 <__sflush_r+0x1c>
 80009d2:	4407      	add	r7, r0
 80009d4:	eba8 0800 	sub.w	r8, r8, r0
 80009d8:	e7e9      	b.n	80009ae <__sflush_r+0xda>
 80009da:	bf00      	nop
 80009dc:	20400001 	.word	0x20400001

080009e0 <_fflush_r>:
 80009e0:	b538      	push	{r3, r4, r5, lr}
 80009e2:	690b      	ldr	r3, [r1, #16]
 80009e4:	4605      	mov	r5, r0
 80009e6:	460c      	mov	r4, r1
 80009e8:	b1db      	cbz	r3, 8000a22 <_fflush_r+0x42>
 80009ea:	b118      	cbz	r0, 80009f4 <_fflush_r+0x14>
 80009ec:	6983      	ldr	r3, [r0, #24]
 80009ee:	b90b      	cbnz	r3, 80009f4 <_fflush_r+0x14>
 80009f0:	f000 f860 	bl	8000ab4 <__sinit>
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <_fflush_r+0x48>)
 80009f6:	429c      	cmp	r4, r3
 80009f8:	d109      	bne.n	8000a0e <_fflush_r+0x2e>
 80009fa:	686c      	ldr	r4, [r5, #4]
 80009fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a00:	b17b      	cbz	r3, 8000a22 <_fflush_r+0x42>
 8000a02:	4621      	mov	r1, r4
 8000a04:	4628      	mov	r0, r5
 8000a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a0a:	f7ff bf63 	b.w	80008d4 <__sflush_r>
 8000a0e:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <_fflush_r+0x4c>)
 8000a10:	429c      	cmp	r4, r3
 8000a12:	d101      	bne.n	8000a18 <_fflush_r+0x38>
 8000a14:	68ac      	ldr	r4, [r5, #8]
 8000a16:	e7f1      	b.n	80009fc <_fflush_r+0x1c>
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <_fflush_r+0x50>)
 8000a1a:	429c      	cmp	r4, r3
 8000a1c:	bf08      	it	eq
 8000a1e:	68ec      	ldreq	r4, [r5, #12]
 8000a20:	e7ec      	b.n	80009fc <_fflush_r+0x1c>
 8000a22:	2000      	movs	r0, #0
 8000a24:	bd38      	pop	{r3, r4, r5, pc}
 8000a26:	bf00      	nop
 8000a28:	08000fec 	.word	0x08000fec
 8000a2c:	0800100c 	.word	0x0800100c
 8000a30:	08000fcc 	.word	0x08000fcc

08000a34 <std>:
 8000a34:	2300      	movs	r3, #0
 8000a36:	b510      	push	{r4, lr}
 8000a38:	4604      	mov	r4, r0
 8000a3a:	e9c0 3300 	strd	r3, r3, [r0]
 8000a3e:	6083      	str	r3, [r0, #8]
 8000a40:	8181      	strh	r1, [r0, #12]
 8000a42:	6643      	str	r3, [r0, #100]	; 0x64
 8000a44:	81c2      	strh	r2, [r0, #14]
 8000a46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a4a:	6183      	str	r3, [r0, #24]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	2208      	movs	r2, #8
 8000a50:	305c      	adds	r0, #92	; 0x5c
 8000a52:	f7ff fe13 	bl	800067c <memset>
 8000a56:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <std+0x38>)
 8000a58:	6263      	str	r3, [r4, #36]	; 0x24
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <std+0x3c>)
 8000a5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <std+0x40>)
 8000a60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <std+0x44>)
 8000a64:	6224      	str	r4, [r4, #32]
 8000a66:	6323      	str	r3, [r4, #48]	; 0x30
 8000a68:	bd10      	pop	{r4, pc}
 8000a6a:	bf00      	nop
 8000a6c:	08000e01 	.word	0x08000e01
 8000a70:	08000e23 	.word	0x08000e23
 8000a74:	08000e5b 	.word	0x08000e5b
 8000a78:	08000e7f 	.word	0x08000e7f

08000a7c <_cleanup_r>:
 8000a7c:	4901      	ldr	r1, [pc, #4]	; (8000a84 <_cleanup_r+0x8>)
 8000a7e:	f000 b885 	b.w	8000b8c <_fwalk_reent>
 8000a82:	bf00      	nop
 8000a84:	080009e1 	.word	0x080009e1

08000a88 <__sfmoreglue>:
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	1e4a      	subs	r2, r1, #1
 8000a8c:	2568      	movs	r5, #104	; 0x68
 8000a8e:	4355      	muls	r5, r2
 8000a90:	460e      	mov	r6, r1
 8000a92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000a96:	f000 f949 	bl	8000d2c <_malloc_r>
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	b140      	cbz	r0, 8000ab0 <__sfmoreglue+0x28>
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	e9c0 1600 	strd	r1, r6, [r0]
 8000aa4:	300c      	adds	r0, #12
 8000aa6:	60a0      	str	r0, [r4, #8]
 8000aa8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000aac:	f7ff fde6 	bl	800067c <memset>
 8000ab0:	4620      	mov	r0, r4
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}

08000ab4 <__sinit>:
 8000ab4:	6983      	ldr	r3, [r0, #24]
 8000ab6:	b510      	push	{r4, lr}
 8000ab8:	4604      	mov	r4, r0
 8000aba:	bb33      	cbnz	r3, 8000b0a <__sinit+0x56>
 8000abc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000ac0:	6503      	str	r3, [r0, #80]	; 0x50
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <__sinit+0x58>)
 8000ac4:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <__sinit+0x5c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	6282      	str	r2, [r0, #40]	; 0x28
 8000aca:	4298      	cmp	r0, r3
 8000acc:	bf04      	itt	eq
 8000ace:	2301      	moveq	r3, #1
 8000ad0:	6183      	streq	r3, [r0, #24]
 8000ad2:	f000 f81f 	bl	8000b14 <__sfp>
 8000ad6:	6060      	str	r0, [r4, #4]
 8000ad8:	4620      	mov	r0, r4
 8000ada:	f000 f81b 	bl	8000b14 <__sfp>
 8000ade:	60a0      	str	r0, [r4, #8]
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	f000 f817 	bl	8000b14 <__sfp>
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60e0      	str	r0, [r4, #12]
 8000aea:	2104      	movs	r1, #4
 8000aec:	6860      	ldr	r0, [r4, #4]
 8000aee:	f7ff ffa1 	bl	8000a34 <std>
 8000af2:	2201      	movs	r2, #1
 8000af4:	2109      	movs	r1, #9
 8000af6:	68a0      	ldr	r0, [r4, #8]
 8000af8:	f7ff ff9c 	bl	8000a34 <std>
 8000afc:	2202      	movs	r2, #2
 8000afe:	2112      	movs	r1, #18
 8000b00:	68e0      	ldr	r0, [r4, #12]
 8000b02:	f7ff ff97 	bl	8000a34 <std>
 8000b06:	2301      	movs	r3, #1
 8000b08:	61a3      	str	r3, [r4, #24]
 8000b0a:	bd10      	pop	{r4, pc}
 8000b0c:	08000fc8 	.word	0x08000fc8
 8000b10:	08000a7d 	.word	0x08000a7d

08000b14 <__sfp>:
 8000b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b16:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <__sfp+0x70>)
 8000b18:	681e      	ldr	r6, [r3, #0]
 8000b1a:	69b3      	ldr	r3, [r6, #24]
 8000b1c:	4607      	mov	r7, r0
 8000b1e:	b913      	cbnz	r3, 8000b26 <__sfp+0x12>
 8000b20:	4630      	mov	r0, r6
 8000b22:	f7ff ffc7 	bl	8000ab4 <__sinit>
 8000b26:	3648      	adds	r6, #72	; 0x48
 8000b28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	d503      	bpl.n	8000b38 <__sfp+0x24>
 8000b30:	6833      	ldr	r3, [r6, #0]
 8000b32:	b133      	cbz	r3, 8000b42 <__sfp+0x2e>
 8000b34:	6836      	ldr	r6, [r6, #0]
 8000b36:	e7f7      	b.n	8000b28 <__sfp+0x14>
 8000b38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000b3c:	b16d      	cbz	r5, 8000b5a <__sfp+0x46>
 8000b3e:	3468      	adds	r4, #104	; 0x68
 8000b40:	e7f4      	b.n	8000b2c <__sfp+0x18>
 8000b42:	2104      	movs	r1, #4
 8000b44:	4638      	mov	r0, r7
 8000b46:	f7ff ff9f 	bl	8000a88 <__sfmoreglue>
 8000b4a:	6030      	str	r0, [r6, #0]
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d1f1      	bne.n	8000b34 <__sfp+0x20>
 8000b50:	230c      	movs	r3, #12
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	4604      	mov	r4, r0
 8000b56:	4620      	mov	r0, r4
 8000b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <__sfp+0x74>)
 8000b5c:	6665      	str	r5, [r4, #100]	; 0x64
 8000b5e:	e9c4 5500 	strd	r5, r5, [r4]
 8000b62:	60a5      	str	r5, [r4, #8]
 8000b64:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000b68:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	4629      	mov	r1, r5
 8000b70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000b74:	f7ff fd82 	bl	800067c <memset>
 8000b78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000b7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000b80:	e7e9      	b.n	8000b56 <__sfp+0x42>
 8000b82:	bf00      	nop
 8000b84:	08000fc8 	.word	0x08000fc8
 8000b88:	ffff0001 	.word	0xffff0001

08000b8c <_fwalk_reent>:
 8000b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b90:	4680      	mov	r8, r0
 8000b92:	4689      	mov	r9, r1
 8000b94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000b98:	2600      	movs	r6, #0
 8000b9a:	b914      	cbnz	r4, 8000ba2 <_fwalk_reent+0x16>
 8000b9c:	4630      	mov	r0, r6
 8000b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ba2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000ba6:	3f01      	subs	r7, #1
 8000ba8:	d501      	bpl.n	8000bae <_fwalk_reent+0x22>
 8000baa:	6824      	ldr	r4, [r4, #0]
 8000bac:	e7f5      	b.n	8000b9a <_fwalk_reent+0xe>
 8000bae:	89ab      	ldrh	r3, [r5, #12]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d907      	bls.n	8000bc4 <_fwalk_reent+0x38>
 8000bb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	d003      	beq.n	8000bc4 <_fwalk_reent+0x38>
 8000bbc:	4629      	mov	r1, r5
 8000bbe:	4640      	mov	r0, r8
 8000bc0:	47c8      	blx	r9
 8000bc2:	4306      	orrs	r6, r0
 8000bc4:	3568      	adds	r5, #104	; 0x68
 8000bc6:	e7ee      	b.n	8000ba6 <_fwalk_reent+0x1a>

08000bc8 <__swhatbuf_r>:
 8000bc8:	b570      	push	{r4, r5, r6, lr}
 8000bca:	460e      	mov	r6, r1
 8000bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	b096      	sub	sp, #88	; 0x58
 8000bd4:	4614      	mov	r4, r2
 8000bd6:	461d      	mov	r5, r3
 8000bd8:	da07      	bge.n	8000bea <__swhatbuf_r+0x22>
 8000bda:	2300      	movs	r3, #0
 8000bdc:	602b      	str	r3, [r5, #0]
 8000bde:	89b3      	ldrh	r3, [r6, #12]
 8000be0:	061a      	lsls	r2, r3, #24
 8000be2:	d410      	bmi.n	8000c06 <__swhatbuf_r+0x3e>
 8000be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be8:	e00e      	b.n	8000c08 <__swhatbuf_r+0x40>
 8000bea:	466a      	mov	r2, sp
 8000bec:	f000 f96e 	bl	8000ecc <_fstat_r>
 8000bf0:	2800      	cmp	r0, #0
 8000bf2:	dbf2      	blt.n	8000bda <__swhatbuf_r+0x12>
 8000bf4:	9a01      	ldr	r2, [sp, #4]
 8000bf6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000bfa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000bfe:	425a      	negs	r2, r3
 8000c00:	415a      	adcs	r2, r3
 8000c02:	602a      	str	r2, [r5, #0]
 8000c04:	e7ee      	b.n	8000be4 <__swhatbuf_r+0x1c>
 8000c06:	2340      	movs	r3, #64	; 0x40
 8000c08:	2000      	movs	r0, #0
 8000c0a:	6023      	str	r3, [r4, #0]
 8000c0c:	b016      	add	sp, #88	; 0x58
 8000c0e:	bd70      	pop	{r4, r5, r6, pc}

08000c10 <__smakebuf_r>:
 8000c10:	898b      	ldrh	r3, [r1, #12]
 8000c12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c14:	079d      	lsls	r5, r3, #30
 8000c16:	4606      	mov	r6, r0
 8000c18:	460c      	mov	r4, r1
 8000c1a:	d507      	bpl.n	8000c2c <__smakebuf_r+0x1c>
 8000c1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000c20:	6023      	str	r3, [r4, #0]
 8000c22:	6123      	str	r3, [r4, #16]
 8000c24:	2301      	movs	r3, #1
 8000c26:	6163      	str	r3, [r4, #20]
 8000c28:	b002      	add	sp, #8
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}
 8000c2c:	ab01      	add	r3, sp, #4
 8000c2e:	466a      	mov	r2, sp
 8000c30:	f7ff ffca 	bl	8000bc8 <__swhatbuf_r>
 8000c34:	9900      	ldr	r1, [sp, #0]
 8000c36:	4605      	mov	r5, r0
 8000c38:	4630      	mov	r0, r6
 8000c3a:	f000 f877 	bl	8000d2c <_malloc_r>
 8000c3e:	b948      	cbnz	r0, 8000c54 <__smakebuf_r+0x44>
 8000c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c44:	059a      	lsls	r2, r3, #22
 8000c46:	d4ef      	bmi.n	8000c28 <__smakebuf_r+0x18>
 8000c48:	f023 0303 	bic.w	r3, r3, #3
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	81a3      	strh	r3, [r4, #12]
 8000c52:	e7e3      	b.n	8000c1c <__smakebuf_r+0xc>
 8000c54:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <__smakebuf_r+0x7c>)
 8000c56:	62b3      	str	r3, [r6, #40]	; 0x28
 8000c58:	89a3      	ldrh	r3, [r4, #12]
 8000c5a:	6020      	str	r0, [r4, #0]
 8000c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c60:	81a3      	strh	r3, [r4, #12]
 8000c62:	9b00      	ldr	r3, [sp, #0]
 8000c64:	6163      	str	r3, [r4, #20]
 8000c66:	9b01      	ldr	r3, [sp, #4]
 8000c68:	6120      	str	r0, [r4, #16]
 8000c6a:	b15b      	cbz	r3, 8000c84 <__smakebuf_r+0x74>
 8000c6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c70:	4630      	mov	r0, r6
 8000c72:	f000 f93d 	bl	8000ef0 <_isatty_r>
 8000c76:	b128      	cbz	r0, 8000c84 <__smakebuf_r+0x74>
 8000c78:	89a3      	ldrh	r3, [r4, #12]
 8000c7a:	f023 0303 	bic.w	r3, r3, #3
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	81a3      	strh	r3, [r4, #12]
 8000c84:	89a3      	ldrh	r3, [r4, #12]
 8000c86:	431d      	orrs	r5, r3
 8000c88:	81a5      	strh	r5, [r4, #12]
 8000c8a:	e7cd      	b.n	8000c28 <__smakebuf_r+0x18>
 8000c8c:	08000a7d 	.word	0x08000a7d

08000c90 <_free_r>:
 8000c90:	b538      	push	{r3, r4, r5, lr}
 8000c92:	4605      	mov	r5, r0
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d045      	beq.n	8000d24 <_free_r+0x94>
 8000c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c9c:	1f0c      	subs	r4, r1, #4
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bfb8      	it	lt
 8000ca2:	18e4      	addlt	r4, r4, r3
 8000ca4:	f000 f946 	bl	8000f34 <__malloc_lock>
 8000ca8:	4a1f      	ldr	r2, [pc, #124]	; (8000d28 <_free_r+0x98>)
 8000caa:	6813      	ldr	r3, [r2, #0]
 8000cac:	4610      	mov	r0, r2
 8000cae:	b933      	cbnz	r3, 8000cbe <_free_r+0x2e>
 8000cb0:	6063      	str	r3, [r4, #4]
 8000cb2:	6014      	str	r4, [r2, #0]
 8000cb4:	4628      	mov	r0, r5
 8000cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cba:	f000 b93c 	b.w	8000f36 <__malloc_unlock>
 8000cbe:	42a3      	cmp	r3, r4
 8000cc0:	d90c      	bls.n	8000cdc <_free_r+0x4c>
 8000cc2:	6821      	ldr	r1, [r4, #0]
 8000cc4:	1862      	adds	r2, r4, r1
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	bf04      	itt	eq
 8000cca:	681a      	ldreq	r2, [r3, #0]
 8000ccc:	685b      	ldreq	r3, [r3, #4]
 8000cce:	6063      	str	r3, [r4, #4]
 8000cd0:	bf04      	itt	eq
 8000cd2:	1852      	addeq	r2, r2, r1
 8000cd4:	6022      	streq	r2, [r4, #0]
 8000cd6:	6004      	str	r4, [r0, #0]
 8000cd8:	e7ec      	b.n	8000cb4 <_free_r+0x24>
 8000cda:	4613      	mov	r3, r2
 8000cdc:	685a      	ldr	r2, [r3, #4]
 8000cde:	b10a      	cbz	r2, 8000ce4 <_free_r+0x54>
 8000ce0:	42a2      	cmp	r2, r4
 8000ce2:	d9fa      	bls.n	8000cda <_free_r+0x4a>
 8000ce4:	6819      	ldr	r1, [r3, #0]
 8000ce6:	1858      	adds	r0, r3, r1
 8000ce8:	42a0      	cmp	r0, r4
 8000cea:	d10b      	bne.n	8000d04 <_free_r+0x74>
 8000cec:	6820      	ldr	r0, [r4, #0]
 8000cee:	4401      	add	r1, r0
 8000cf0:	1858      	adds	r0, r3, r1
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	6019      	str	r1, [r3, #0]
 8000cf6:	d1dd      	bne.n	8000cb4 <_free_r+0x24>
 8000cf8:	6810      	ldr	r0, [r2, #0]
 8000cfa:	6852      	ldr	r2, [r2, #4]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	4401      	add	r1, r0
 8000d00:	6019      	str	r1, [r3, #0]
 8000d02:	e7d7      	b.n	8000cb4 <_free_r+0x24>
 8000d04:	d902      	bls.n	8000d0c <_free_r+0x7c>
 8000d06:	230c      	movs	r3, #12
 8000d08:	602b      	str	r3, [r5, #0]
 8000d0a:	e7d3      	b.n	8000cb4 <_free_r+0x24>
 8000d0c:	6820      	ldr	r0, [r4, #0]
 8000d0e:	1821      	adds	r1, r4, r0
 8000d10:	428a      	cmp	r2, r1
 8000d12:	bf04      	itt	eq
 8000d14:	6811      	ldreq	r1, [r2, #0]
 8000d16:	6852      	ldreq	r2, [r2, #4]
 8000d18:	6062      	str	r2, [r4, #4]
 8000d1a:	bf04      	itt	eq
 8000d1c:	1809      	addeq	r1, r1, r0
 8000d1e:	6021      	streq	r1, [r4, #0]
 8000d20:	605c      	str	r4, [r3, #4]
 8000d22:	e7c7      	b.n	8000cb4 <_free_r+0x24>
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop
 8000d28:	20000094 	.word	0x20000094

08000d2c <_malloc_r>:
 8000d2c:	b570      	push	{r4, r5, r6, lr}
 8000d2e:	1ccd      	adds	r5, r1, #3
 8000d30:	f025 0503 	bic.w	r5, r5, #3
 8000d34:	3508      	adds	r5, #8
 8000d36:	2d0c      	cmp	r5, #12
 8000d38:	bf38      	it	cc
 8000d3a:	250c      	movcc	r5, #12
 8000d3c:	2d00      	cmp	r5, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	db01      	blt.n	8000d46 <_malloc_r+0x1a>
 8000d42:	42a9      	cmp	r1, r5
 8000d44:	d903      	bls.n	8000d4e <_malloc_r+0x22>
 8000d46:	230c      	movs	r3, #12
 8000d48:	6033      	str	r3, [r6, #0]
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	bd70      	pop	{r4, r5, r6, pc}
 8000d4e:	f000 f8f1 	bl	8000f34 <__malloc_lock>
 8000d52:	4a21      	ldr	r2, [pc, #132]	; (8000dd8 <_malloc_r+0xac>)
 8000d54:	6814      	ldr	r4, [r2, #0]
 8000d56:	4621      	mov	r1, r4
 8000d58:	b991      	cbnz	r1, 8000d80 <_malloc_r+0x54>
 8000d5a:	4c20      	ldr	r4, [pc, #128]	; (8000ddc <_malloc_r+0xb0>)
 8000d5c:	6823      	ldr	r3, [r4, #0]
 8000d5e:	b91b      	cbnz	r3, 8000d68 <_malloc_r+0x3c>
 8000d60:	4630      	mov	r0, r6
 8000d62:	f000 f83d 	bl	8000de0 <_sbrk_r>
 8000d66:	6020      	str	r0, [r4, #0]
 8000d68:	4629      	mov	r1, r5
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	f000 f838 	bl	8000de0 <_sbrk_r>
 8000d70:	1c43      	adds	r3, r0, #1
 8000d72:	d124      	bne.n	8000dbe <_malloc_r+0x92>
 8000d74:	230c      	movs	r3, #12
 8000d76:	6033      	str	r3, [r6, #0]
 8000d78:	4630      	mov	r0, r6
 8000d7a:	f000 f8dc 	bl	8000f36 <__malloc_unlock>
 8000d7e:	e7e4      	b.n	8000d4a <_malloc_r+0x1e>
 8000d80:	680b      	ldr	r3, [r1, #0]
 8000d82:	1b5b      	subs	r3, r3, r5
 8000d84:	d418      	bmi.n	8000db8 <_malloc_r+0x8c>
 8000d86:	2b0b      	cmp	r3, #11
 8000d88:	d90f      	bls.n	8000daa <_malloc_r+0x7e>
 8000d8a:	600b      	str	r3, [r1, #0]
 8000d8c:	50cd      	str	r5, [r1, r3]
 8000d8e:	18cc      	adds	r4, r1, r3
 8000d90:	4630      	mov	r0, r6
 8000d92:	f000 f8d0 	bl	8000f36 <__malloc_unlock>
 8000d96:	f104 000b 	add.w	r0, r4, #11
 8000d9a:	1d23      	adds	r3, r4, #4
 8000d9c:	f020 0007 	bic.w	r0, r0, #7
 8000da0:	1ac3      	subs	r3, r0, r3
 8000da2:	d0d3      	beq.n	8000d4c <_malloc_r+0x20>
 8000da4:	425a      	negs	r2, r3
 8000da6:	50e2      	str	r2, [r4, r3]
 8000da8:	e7d0      	b.n	8000d4c <_malloc_r+0x20>
 8000daa:	428c      	cmp	r4, r1
 8000dac:	684b      	ldr	r3, [r1, #4]
 8000dae:	bf16      	itet	ne
 8000db0:	6063      	strne	r3, [r4, #4]
 8000db2:	6013      	streq	r3, [r2, #0]
 8000db4:	460c      	movne	r4, r1
 8000db6:	e7eb      	b.n	8000d90 <_malloc_r+0x64>
 8000db8:	460c      	mov	r4, r1
 8000dba:	6849      	ldr	r1, [r1, #4]
 8000dbc:	e7cc      	b.n	8000d58 <_malloc_r+0x2c>
 8000dbe:	1cc4      	adds	r4, r0, #3
 8000dc0:	f024 0403 	bic.w	r4, r4, #3
 8000dc4:	42a0      	cmp	r0, r4
 8000dc6:	d005      	beq.n	8000dd4 <_malloc_r+0xa8>
 8000dc8:	1a21      	subs	r1, r4, r0
 8000dca:	4630      	mov	r0, r6
 8000dcc:	f000 f808 	bl	8000de0 <_sbrk_r>
 8000dd0:	3001      	adds	r0, #1
 8000dd2:	d0cf      	beq.n	8000d74 <_malloc_r+0x48>
 8000dd4:	6025      	str	r5, [r4, #0]
 8000dd6:	e7db      	b.n	8000d90 <_malloc_r+0x64>
 8000dd8:	20000094 	.word	0x20000094
 8000ddc:	20000098 	.word	0x20000098

08000de0 <_sbrk_r>:
 8000de0:	b538      	push	{r3, r4, r5, lr}
 8000de2:	4c06      	ldr	r4, [pc, #24]	; (8000dfc <_sbrk_r+0x1c>)
 8000de4:	2300      	movs	r3, #0
 8000de6:	4605      	mov	r5, r0
 8000de8:	4608      	mov	r0, r1
 8000dea:	6023      	str	r3, [r4, #0]
 8000dec:	f7ff fbbc 	bl	8000568 <_sbrk>
 8000df0:	1c43      	adds	r3, r0, #1
 8000df2:	d102      	bne.n	8000dfa <_sbrk_r+0x1a>
 8000df4:	6823      	ldr	r3, [r4, #0]
 8000df6:	b103      	cbz	r3, 8000dfa <_sbrk_r+0x1a>
 8000df8:	602b      	str	r3, [r5, #0]
 8000dfa:	bd38      	pop	{r3, r4, r5, pc}
 8000dfc:	200000a4 	.word	0x200000a4

08000e00 <__sread>:
 8000e00:	b510      	push	{r4, lr}
 8000e02:	460c      	mov	r4, r1
 8000e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e08:	f000 f896 	bl	8000f38 <_read_r>
 8000e0c:	2800      	cmp	r0, #0
 8000e0e:	bfab      	itete	ge
 8000e10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000e12:	89a3      	ldrhlt	r3, [r4, #12]
 8000e14:	181b      	addge	r3, r3, r0
 8000e16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000e1a:	bfac      	ite	ge
 8000e1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000e1e:	81a3      	strhlt	r3, [r4, #12]
 8000e20:	bd10      	pop	{r4, pc}

08000e22 <__swrite>:
 8000e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e26:	461f      	mov	r7, r3
 8000e28:	898b      	ldrh	r3, [r1, #12]
 8000e2a:	05db      	lsls	r3, r3, #23
 8000e2c:	4605      	mov	r5, r0
 8000e2e:	460c      	mov	r4, r1
 8000e30:	4616      	mov	r6, r2
 8000e32:	d505      	bpl.n	8000e40 <__swrite+0x1e>
 8000e34:	2302      	movs	r3, #2
 8000e36:	2200      	movs	r2, #0
 8000e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e3c:	f000 f868 	bl	8000f10 <_lseek_r>
 8000e40:	89a3      	ldrh	r3, [r4, #12]
 8000e42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e4a:	81a3      	strh	r3, [r4, #12]
 8000e4c:	4632      	mov	r2, r6
 8000e4e:	463b      	mov	r3, r7
 8000e50:	4628      	mov	r0, r5
 8000e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e56:	f000 b817 	b.w	8000e88 <_write_r>

08000e5a <__sseek>:
 8000e5a:	b510      	push	{r4, lr}
 8000e5c:	460c      	mov	r4, r1
 8000e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e62:	f000 f855 	bl	8000f10 <_lseek_r>
 8000e66:	1c43      	adds	r3, r0, #1
 8000e68:	89a3      	ldrh	r3, [r4, #12]
 8000e6a:	bf15      	itete	ne
 8000e6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8000e6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000e72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000e76:	81a3      	strheq	r3, [r4, #12]
 8000e78:	bf18      	it	ne
 8000e7a:	81a3      	strhne	r3, [r4, #12]
 8000e7c:	bd10      	pop	{r4, pc}

08000e7e <__sclose>:
 8000e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e82:	f000 b813 	b.w	8000eac <_close_r>
	...

08000e88 <_write_r>:
 8000e88:	b538      	push	{r3, r4, r5, lr}
 8000e8a:	4c07      	ldr	r4, [pc, #28]	; (8000ea8 <_write_r+0x20>)
 8000e8c:	4605      	mov	r5, r0
 8000e8e:	4608      	mov	r0, r1
 8000e90:	4611      	mov	r1, r2
 8000e92:	2200      	movs	r2, #0
 8000e94:	6022      	str	r2, [r4, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	f7ff fb15 	bl	80004c6 <_write>
 8000e9c:	1c43      	adds	r3, r0, #1
 8000e9e:	d102      	bne.n	8000ea6 <_write_r+0x1e>
 8000ea0:	6823      	ldr	r3, [r4, #0]
 8000ea2:	b103      	cbz	r3, 8000ea6 <_write_r+0x1e>
 8000ea4:	602b      	str	r3, [r5, #0]
 8000ea6:	bd38      	pop	{r3, r4, r5, pc}
 8000ea8:	200000a4 	.word	0x200000a4

08000eac <_close_r>:
 8000eac:	b538      	push	{r3, r4, r5, lr}
 8000eae:	4c06      	ldr	r4, [pc, #24]	; (8000ec8 <_close_r+0x1c>)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	4605      	mov	r5, r0
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	6023      	str	r3, [r4, #0]
 8000eb8:	f7ff fb21 	bl	80004fe <_close>
 8000ebc:	1c43      	adds	r3, r0, #1
 8000ebe:	d102      	bne.n	8000ec6 <_close_r+0x1a>
 8000ec0:	6823      	ldr	r3, [r4, #0]
 8000ec2:	b103      	cbz	r3, 8000ec6 <_close_r+0x1a>
 8000ec4:	602b      	str	r3, [r5, #0]
 8000ec6:	bd38      	pop	{r3, r4, r5, pc}
 8000ec8:	200000a4 	.word	0x200000a4

08000ecc <_fstat_r>:
 8000ecc:	b538      	push	{r3, r4, r5, lr}
 8000ece:	4c07      	ldr	r4, [pc, #28]	; (8000eec <_fstat_r+0x20>)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	4605      	mov	r5, r0
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	6023      	str	r3, [r4, #0]
 8000eda:	f7ff fb1c 	bl	8000516 <_fstat>
 8000ede:	1c43      	adds	r3, r0, #1
 8000ee0:	d102      	bne.n	8000ee8 <_fstat_r+0x1c>
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	b103      	cbz	r3, 8000ee8 <_fstat_r+0x1c>
 8000ee6:	602b      	str	r3, [r5, #0]
 8000ee8:	bd38      	pop	{r3, r4, r5, pc}
 8000eea:	bf00      	nop
 8000eec:	200000a4 	.word	0x200000a4

08000ef0 <_isatty_r>:
 8000ef0:	b538      	push	{r3, r4, r5, lr}
 8000ef2:	4c06      	ldr	r4, [pc, #24]	; (8000f0c <_isatty_r+0x1c>)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	4605      	mov	r5, r0
 8000ef8:	4608      	mov	r0, r1
 8000efa:	6023      	str	r3, [r4, #0]
 8000efc:	f7ff fb1b 	bl	8000536 <_isatty>
 8000f00:	1c43      	adds	r3, r0, #1
 8000f02:	d102      	bne.n	8000f0a <_isatty_r+0x1a>
 8000f04:	6823      	ldr	r3, [r4, #0]
 8000f06:	b103      	cbz	r3, 8000f0a <_isatty_r+0x1a>
 8000f08:	602b      	str	r3, [r5, #0]
 8000f0a:	bd38      	pop	{r3, r4, r5, pc}
 8000f0c:	200000a4 	.word	0x200000a4

08000f10 <_lseek_r>:
 8000f10:	b538      	push	{r3, r4, r5, lr}
 8000f12:	4c07      	ldr	r4, [pc, #28]	; (8000f30 <_lseek_r+0x20>)
 8000f14:	4605      	mov	r5, r0
 8000f16:	4608      	mov	r0, r1
 8000f18:	4611      	mov	r1, r2
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	6022      	str	r2, [r4, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	f7ff fb14 	bl	800054c <_lseek>
 8000f24:	1c43      	adds	r3, r0, #1
 8000f26:	d102      	bne.n	8000f2e <_lseek_r+0x1e>
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	b103      	cbz	r3, 8000f2e <_lseek_r+0x1e>
 8000f2c:	602b      	str	r3, [r5, #0]
 8000f2e:	bd38      	pop	{r3, r4, r5, pc}
 8000f30:	200000a4 	.word	0x200000a4

08000f34 <__malloc_lock>:
 8000f34:	4770      	bx	lr

08000f36 <__malloc_unlock>:
 8000f36:	4770      	bx	lr

08000f38 <_read_r>:
 8000f38:	b538      	push	{r3, r4, r5, lr}
 8000f3a:	4c07      	ldr	r4, [pc, #28]	; (8000f58 <_read_r+0x20>)
 8000f3c:	4605      	mov	r5, r0
 8000f3e:	4608      	mov	r0, r1
 8000f40:	4611      	mov	r1, r2
 8000f42:	2200      	movs	r2, #0
 8000f44:	6022      	str	r2, [r4, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	f7ff faa0 	bl	800048c <_read>
 8000f4c:	1c43      	adds	r3, r0, #1
 8000f4e:	d102      	bne.n	8000f56 <_read_r+0x1e>
 8000f50:	6823      	ldr	r3, [r4, #0]
 8000f52:	b103      	cbz	r3, 8000f56 <_read_r+0x1e>
 8000f54:	602b      	str	r3, [r5, #0]
 8000f56:	bd38      	pop	{r3, r4, r5, pc}
 8000f58:	200000a4 	.word	0x200000a4

08000f5c <_init>:
 8000f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5e:	bf00      	nop
 8000f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f62:	bc08      	pop	{r3}
 8000f64:	469e      	mov	lr, r3
 8000f66:	4770      	bx	lr

08000f68 <_fini>:
 8000f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6a:	bf00      	nop
 8000f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f6e:	bc08      	pop	{r3}
 8000f70:	469e      	mov	lr, r3
 8000f72:	4770      	bx	lr
